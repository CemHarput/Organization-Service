package com.caseStudy.organization_service;

import com.caseStudy.organization_service.model.Organization;
import com.caseStudy.organization_service.repository.OrganizationRepository;
import com.caseStudy.organization_service.util.AuditorContext;
import com.caseStudy.organization_service.util.NameNormalizer;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@SpringBootApplication
public class OrganizationServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(OrganizationServiceApplication.class, args);
	}

	@Bean
	public CommandLineRunner seedOrganizations(OrganizationRepository repo) {
		return args -> {
			if (repo.count() > 0) {
				return;
			}

			List<Organization> batch = new ArrayList<>();
			Random rnd = new Random();

			for (int i = 1; i <= 10; i++) {
				Organization org = new Organization();
				String name = "Demo Org " + i;

				org.setOrganizationName(name);
				org.setNormalizedName(NameNormalizer.normalize(name));


				org.setRegistryNumber(String.format("REG%03d", i));

				org.setContactEmail("org" + i + "@example.com");
				org.setCompanySize(5 + rnd.nextInt(200));
				org.setYearFounded(1980 + rnd.nextInt(40));

				batch.add(org);
			}
			//These values are generated by system that is why createdAt,updatedAt,updateBy and createBy fields will be empty.
			repo.saveAll(batch);

		};
	}

}
